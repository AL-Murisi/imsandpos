generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Company {
  id                                                 String               @id @default(cuid())
  name                                               String
  email                                              String?              @unique(map: "unique_company_email")
  phone                                              String?
  address                                            String?
  city                                               String?
  state                                              String?
  country                                            String?
  taxNumber                                          String?              @map("tax_number")
  logoUrl                                            String?              @map("logo_url")
  footerMsg                                          String?              @map("footer_msg")
  isActive                                           Boolean              @default(true) @map("is_active")
  createdAt                                          DateTime             @default(now()) @map("created_at")
  updatedAt                                          DateTime             @updatedAt @map("updated_at")
  activityLogs                                       ActivityLogs[]
  accounts                                           accounts[]
  brands                                             Brand[]
  categories                                         Category[]
  customers                                          Customer[]
  expense_categories                                 expense_categories[]
  expenses                                           expenses[]
  inventory                                          Inventory[]
  journal_entries                                    journal_entries[]
  payments                                           Payment[]
  points_of_sale_points_of_sale_company_idToaccounts points_of_sale[]     @relation("points_of_sale_company_idToaccounts")
  products                                           Product[]
  purchaseItems                                      PurchaseItem[]
  purchases                                          Purchase[]
  saleItems                                          SaleItem[]
  sales                                              Sale[]
  stockMovements                                     StockMovement[]
  supplierPayments                                   SupplierPayment[]
  suppliers                                          Supplier[]
  users                                              User[]
  warehouses                                         Warehouse[]
account_mappings     account_mappings[]
fiscal_periods       fiscal_periods[]
  @@map("companies")
}

model User {
  id                                                 String            @id @default(cuid())
  companyId                                          String            @map("company_id")
  email                                              String            @unique
  name                                               String
  phoneNumber                                        String?           @map("phone_number")
  password                                           String?
  supabaseId                                         String?           @unique @map("supabase_id")
  isActive                                           Boolean           @default(true) @map("is_active")
  createdAt                                          DateTime          @default(now()) @map("created_at")
  updatedAt                                          DateTime          @updatedAt @map("updated_at")
  activityLogs                                       ActivityLogs[]
  expenses                                           expenses[]
  journal_entries_journal_entries_created_byTousers  journal_entries[] @relation("journal_entries_created_byTousers")
  journal_entries_journal_entries_updated_byTousers  journal_entries[] @relation("journal_entries_updated_byTousers")
  payments                                           Payment[]
  points_of_sale_points_of_sale_manager_idToaccounts points_of_sale[]  @relation("points_of_sale_manager_idToaccounts")
  sales                                              Sale[]
  stockMovements                                     StockMovement[]
  roles                                              UserRole[]
  company                                            Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId])
  @@index([name])
  @@index([phoneNumber])
  @@index([isActive])
  @@index([createdAt])
  @@map("users")
}

model ActivityLogs {
  id        String   @id @default(cuid())
  companyId String   @map("company_id")
  userId    String   @map("user_id")
  action    String
  details   String?
  ip        String?
  userAgent String?
  createdAt DateTime @default(now()) @map("created_at")
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([companyId])
  @@index([userId])
  @@index([createdAt])
}

model Role {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  permissions Json
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  users       UserRole[]

  @@map("roles")
}

model UserRole {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  roleId    String   @map("role_id")
  createdAt DateTime @default(now()) @map("created_at")
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@index([roleId])
  @@map("user_roles")
}

model Warehouse {
  id             String          @id @default(cuid())
  companyId      String          @map("company_id")
  name           String
  location       String
  address        String?
  city           String?
  state          String?
  country        String?
  postalCode     String?         @map("postal_code")
  phoneNumber    String?         @map("phone_number")
  email          String?
  isActive       Boolean         @default(true) @map("is_active")
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  inventory      Inventory[]
  products       Product[]
  stockMovements StockMovement[]
  company        Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId])
  @@index([isActive])
  @@index([createdAt])
  @@map("warehouses")
}

model Category {
  id          String     @id @default(cuid())
  companyId   String     @map("company_id")
  name        String
  description String?
  parentId    String?    @map("parent_id")
  isActive    Boolean    @default(true) @map("is_active")
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  company     Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]

  @@unique([companyId, name])
  @@index([companyId])
  @@map("categories")
}

model Brand {
  id          String    @id @default(cuid())
  companyId   String    @map("company_id")
  name        String
  description String?
  website     String?
  contactInfo String?   @map("contact_info")
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  company     Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  products    Product[]

  @@unique([companyId, name])
  @@index([companyId])
  @@map("brands")
}

model Supplier {
  id                 String            @id @default(cuid())
  companyId          String            @map("company_id")
  name               String
  contactPerson      String?           @map("contact_person")
  email              String?
  phoneNumber        String?           @map("phone_number")
  address            String?
  city               String?
  state              String?
  country            String?
  postalCode         String?           @map("postal_code")
  taxId              String?           @map("tax_id")
  paymentTerms       String?           @map("payment_terms")
  isActive           Boolean           @default(true) @map("is_active")
  createdAt          DateTime          @default(now()) @map("created_at")
  updatedAt          DateTime          @updatedAt @map("updated_at")
  totalPurchased     Decimal           @default(0) @map("total_purchased") @db.Decimal(12, 2)
  totalPaid          Decimal           @default(0) @map("total_paid") @db.Decimal(12, 2)
  outstandingBalance Decimal           @default(0) @map("outstanding_balance") @db.Decimal(12, 2)
  products           Product[]
  purchases          Purchase[]
  payments           SupplierPayment[]
  company            Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId])
  @@map("suppliers")
}

model Product {
  id               String          @id @default(cuid())
  companyId        String          @map("company_id")
  name             String
  sku              String
  barcode          String?
  description      String?
  categoryId       String          @map("category_id")
  brandId          String?         @map("brand_id")
  supplierId       String?         @map("supplier_id")
  warehouseId      String          @map("warehouse_id")
  type             String?
  unitsPerPacket   Int             @map("units_per_packet")
  packetsPerCarton Int             @map("packets_per_carton")
  costPrice        Decimal         @map("cost_price") @db.Decimal(10, 2)
  pricePerUnit     Decimal?        @map("price_per_unit") @db.Decimal(10, 2)
  pricePerPacket   Decimal         @map("price_per_packet") @db.Decimal(10, 2)
  pricePerCarton   Decimal         @map("price_per_carton") @db.Decimal(10, 2)
  wholesalePrice   Decimal         @map("wholesale_price") @db.Decimal(10, 2)
  minWholesaleQty  Int             @map("min_wholesale_qty")
  weight           Decimal?        @db.Decimal(8, 3)
  dimensions       String?
  image            String?
  status           String          @default("active")
  isActive         Boolean         @default(true) @map("is_active")
  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime        @updatedAt @map("updated_at")
  inventory        Inventory[]
  brand            Brand?          @relation(fields: [brandId], references: [id])
  category         Category        @relation(fields: [categoryId], references: [id])
  company          Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  supplier         Supplier?       @relation(fields: [supplierId], references: [id])
  warehouse        Warehouse       @relation(fields: [warehouseId], references: [id])
  purchaseItems    PurchaseItem[]
  saleItems        SaleItem[]
  stockMovements   StockMovement[]

  @@unique([companyId, sku])
  @@unique([companyId, barcode])
  @@index([companyId])
  @@index([categoryId])
  @@index([brandId])
  @@index([supplierId])
  @@index([warehouseId])
  @@index([status])
  @@index([createdAt], map: "idx_product_created_at")
  @@map("products")
}

model Inventory {
  id                String    @id @default(cuid())
  companyId         String    @map("company_id")
  productId         String    @map("product_id")
  warehouseId       String    @map("warehouse_id")
  stockQuantity     Int       @map("stock_quantity")
  reservedQuantity  Int       @default(0) @map("reserved_quantity")
  availableQuantity Int       @map("available_quantity")
  reorderLevel      Int       @default(0) @map("reorder_level")
  maxStockLevel     Int?      @map("max_stock_level")
  location          String?
  status            String    @default("available")
  lastStockTake     DateTime? @map("last_stock_take")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  company           Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  product           Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  warehouse         Warehouse @relation(fields: [warehouseId], references: [id])

  @@unique([companyId, productId, warehouseId])
  @@index([companyId])
  @@index([productId])
  @@index([warehouseId])
  @@index([location])
  @@index([status])
  @@index([createdAt])
  @@map("inventory")
}

model StockMovement {
  id             String    @id @default(cuid())
  companyId      String    @map("company_id")
  productId      String    @map("product_id")
  warehouseId    String    @map("warehouse_id")
  userId         String    @map("user_id")
  movementType   String
  quantity       Int
  reason         String?
  quantityBefore Int       @map("quantity_before")
  quantityAfter  Int       @map("quantity_after")
  referenceType  String?   @map("reference_type")
  referenceId    String?   @map("reference_id")
  notes          String?
  createdAt      DateTime  @default(now()) @map("created_at")
  company        Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  product        Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  user           User      @relation(fields: [userId], references: [id])
  warehouse      Warehouse @relation(fields: [warehouseId], references: [id])

  @@index([companyId])
  @@index([productId])
  @@index([userId])
  @@index([warehouseId])
  @@index([movementType])
  @@index([reason])
  @@index([createdAt])
  @@map("stock_movements")
}

model Customer {
  id                 String    @id @default(cuid())
  companyId          String    @map("company_id")
  name               String
  email              String?
  phoneNumber        String?   @map("phone_number")
  address            String?
  city               String?
  state              String?
  country            String?
  customerType       String    @default("individual") @map("customer_type")
  taxId              String?   @map("tax_id")
  creditLimit        Decimal?  @map("credit_limit") @db.Decimal(10, 2)
  outstandingBalance Decimal   @default(0) @map("outstanding_balance") @db.Decimal(10, 2)
  isActive           Boolean   @default(true) @map("is_active")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")
  balance            Decimal?  @default(0) @map("balance") @db.Decimal(10, 2)
  company            Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  payments           Payment[]
  sales              Sale[]

  @@unique([companyId, email])
  @@index([companyId])
  @@index([name])
  @@index([phoneNumber])
  @@index([isActive])
  @@index([createdAt])

  @@map("customers")
}

model Sale {
  id               String          @id @default(cuid())
  companyId        String          @map("company_id")
  saleNumber       String          @unique @map("sale_number")
  customerId       String?         @map("customer_id")
  cashierId        String          @map("cashier_id")
  saleType         String          @default("sale")
  status           String          @default("completed")
  subtotal         Decimal         @db.Decimal(10, 2)
  taxAmount        Decimal         @default(0) @map("tax_amount") @db.Decimal(10, 2)
  discountAmount   Decimal         @default(0) @map("discount_amount") @db.Decimal(10, 2)
  totalAmount      Decimal         @map("total_amount") @db.Decimal(10, 2)
  amountPaid       Decimal         @default(0) @map("amount_paid") @db.Decimal(10, 2)
  amountDue        Decimal         @default(0) @map("amount_due") @db.Decimal(10, 2)
  paymentStatus    String          @default("pending") @map("payment_status")
  saleDate         DateTime        @default(now()) @map("sale_date")
  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime        @updatedAt @map("updated_at")
  point_of_sale_id String?
  payments         Payment[]
  saleItems        SaleItem[]
  cashier          User            @relation(fields: [cashierId], references: [id])
  company          Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  customer         Customer?       @relation(fields: [customerId], references: [id])
  points_of_sale   points_of_sale? @relation(fields: [point_of_sale_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([companyId])
  @@index([paymentStatus])
  @@index([saleDate])
  @@index([customerId, paymentStatus])
  @@index([customerId, saleDate])
  @@index([customerId])
  @@index([cashierId])
  @@index([status])
  @@index([saleDate], map: "idx_sale_date")
  @@index([paymentStatus], map: "idx_sale_payment_status")
  @@index([status, saleDate], map: "idx_sale_status_date")
  @@map("sales")
}

model SaleItem {
  id              String   @id @default(cuid())
  companyId       String   @map("company_id")
  saleId          String   @map("sale_id")
  productId       String   @map("product_id")
  quantity        Int
  sellingUnit     String   @map("selling_unit")
  unitPrice       Decimal  @map("unit_price") @db.Decimal(10, 2)
  totalPrice      Decimal  @map("total_price") @db.Decimal(10, 2)
  discountPercent Decimal? @default(0) @map("discount_percent") @db.Decimal(5, 2)
  discountAmount  Decimal? @default(0) @map("discount_amount") @db.Decimal(10, 2)
  createdAt       DateTime @default(now()) @map("created_at")
  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  product         Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  sale            Sale     @relation(fields: [saleId], references: [id], onDelete: Cascade)

  @@index([companyId])
  @@index([saleId])
  @@index([productId])
  @@index([productId, createdAt], map: "idx_saleitem_product_date")
  @@map("sale_items")
}

model Payment {
  id              String    @id @default(cuid())
  companyId       String    @map("company_id")
  saleId          String?   @map("sale_id")
  customerId      String?   @map("customer_id")
  cashierId       String    @map("cashier_id")
  paymentType     String
  paymentMethod   String    @map("payment_method")
  amount          Decimal   @db.Decimal(10, 2)
  referenceNumber String?   @map("reference_number")
  status          String    @default("completed")
  notes           String?
  createdAt       DateTime  @default(now()) @map("created_at")
  cashier         User      @relation(fields: [cashierId], references: [id])
  company         Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  customer        Customer? @relation(fields: [customerId], references: [id])
  sale            Sale?     @relation(fields: [saleId], references: [id])

  @@index([companyId])
  @@index([customerId])
  @@index([saleId])
  @@index([cashierId])
  @@index([paymentMethod])
  @@index([status])
  @@index([createdAt], map: "idx_payment_created_at")
  @@index([status, createdAt], map: "idx_payment_status_created_at")
  @@map("payments")
}

model Purchase {
  id            String         @id @default(cuid())
  companyId     String         @map("company_id")
  supplierId    String         @map("supplier_id")
  totalAmount   Decimal        @default(0) @map("total_amount") @db.Decimal(12, 2)
  amountPaid    Decimal        @default(0) @map("amount_paid") @db.Decimal(12, 2)
  amountDue     Decimal        @default(0) @map("amount_due") @db.Decimal(12, 2)
  status        String         @default("pending")
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  purchaseItems PurchaseItem[]
   supplierPayments  SupplierPayment[]
  company       Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  supplier      Supplier       @relation(fields: [supplierId], references: [id], onDelete: Cascade)

  @@index([companyId])
  @@index([supplierId])
  @@index([status])
  @@index([createdAt])
  @@map("purchases")
}

model PurchaseItem {
  id         String   @id @default(cuid())
  companyId  String   @map("company_id")
  purchaseId String   @map("purchase_id")
  productId  String   @map("product_id")
  quantity   Int
  unitCost   Decimal  @map("unit_cost") @db.Decimal(10, 2)
  totalCost  Decimal  @map("total_cost") @db.Decimal(12, 2)
  createdAt  DateTime @default(now()) @map("created_at")
  company    Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  purchase   Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)

  @@index([companyId])
  @@index([purchaseId])
  @@index([productId])
  @@map("purchase_items")
}

model SupplierPayment {
  id            String   @id @default(cuid())
  companyId     String   @map("company_id")
  supplierId    String   @map("supplier_id")  
  createdBy       String?   // 👈 Add this field
  purchaseId     String?  @map("purchase_id") // 👈 اختياري لربط الدفع بفاتورة معينة

  amount        Decimal  @db.Decimal(12, 2)
  paymentDate   DateTime @default(now()) @map("payment_date")
  paymentMethod String   @map("payment_method")
  note          String?
  createdAt     DateTime @default(now()) @map("created_at")
  company       Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  supplier      Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  purchase       Purchase? @relation(fields: [purchaseId], references: [id], onDelete: Cascade)

  @@index([companyId])
  @@index([supplierId])
  @@index([paymentDate])
  @@index([createdAt])
  @@map("supplier_payments")
}

model OfflineOperation {
  id        String    @id @default(cuid())
  companyId String    @map("company_id")
  userId    String    @map("user_id")
  operation String
  tableName String    @map("table_name")
  recordId  String    @map("record_id")
  data      Json
  status    String    @default("pending")
  createdAt DateTime  @default(now()) @map("created_at")
  syncedAt  DateTime? @map("synced_at")

  @@index([companyId])
  @@map("offline_operations")
}

model expense_categories {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  company_id  String
  name        String     @db.VarChar(255)
  description String?
  is_active   Boolean?   @default(true)
  created_at  DateTime?  @default(now()) @db.Timestamp(6)
  updated_at  DateTime?  @default(now()) @db.Timestamp(6)
  companies   Company    @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_expense_category_company")
  expenses    expenses[]

  @@unique([company_id, name], map: "unique_expense_category_name")
  @@index([company_id], map: "idx_expense_category_company")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model expenses {
  id                 String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  company_id         String
  user_id            String
  category_id        String?             @db.Uuid
  expense_number     String              @unique @db.VarChar(255)
  description        String
  amount             Decimal             @db.Decimal(12, 2)
  expense_date       DateTime            @db.Date
  payment_method     String?             @db.VarChar(50)
  reference_number   String?             @db.VarChar(255)
  receipt_url        String?
  notes              String?
  status             String?             @default("pending") @db.VarChar(50)
  is_active          Boolean?            @default(true)
  created_at         DateTime?           @default(now()) @db.Timestamp(6)
  updated_at         DateTime?           @default(now()) @db.Timestamp(6)
  expense_categories expense_categories? @relation(fields: [category_id], references: [id], onUpdate: NoAction, map: "fk_expense_category")
  companies          Company             @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_expense_company")
  users              User                @relation(fields: [user_id], references: [id], onDelete: SetNull, onUpdate: NoAction, map: "fk_expense_user")

  @@index([category_id], map: "idx_expense_category")
  @@index([company_id], map: "idx_expense_company")
  @@index([company_id, expense_date], map: "idx_expense_company_date")
  @@index([created_at], map: "idx_expense_created_at")
  @@index([expense_date], map: "idx_expense_date")
  @@index([status], map: "idx_expense_status")
  @@index([status, expense_date], map: "idx_expense_status_date")
  @@index([user_id], map: "idx_expense_user")
}

model accounts {
  id               String            @id @default(dbgenerated("gen_random_uuid()"))
  company_id       String
  account_code     String
  account_name_en  String
  account_name_ar  String?
  account_type     account_type
  account_category account_category
  parent_id        String?
  level            Int?              @default(1)
  is_active        Boolean?          @default(true)
  is_system        Boolean?          @default(false)  // NEW: System accounts can't be deleted
  allow_manual_entry Boolean?        @default(true)   // NEW: Some accounts only accept automatic entries
  balance          Decimal?          @default(0) @db.Decimal(15, 2)
  opening_balance  Decimal?          @default(0) @db.Decimal(15, 2)  // NEW
  currency_code    String?           @default("USD") @db.VarChar(3)   // NEW: For multi-currency
  description      String?                                             // NEW
  created_at       DateTime?         @default(now()) @db.Timestamptz(6)
  updated_at       DateTime?         @default(now()) @db.Timestamptz(6)
  
  companies        Company           @relation(fields: [company_id], references: [id], onDelete: Cascade)
  accounts         accounts?         @relation("accountsToaccounts", fields: [parent_id], references: [id])
  other_accounts   accounts[]        @relation("accountsToaccounts")
  journal_entries  journal_entries[]
  account_mappings account_mappings[]  // NEW: Link to business transactions

  @@unique([company_id, account_code])
  @@index([company_id])
  @@index([parent_id])
  @@index([account_type])
  @@index([is_active])
}
model account_mappings {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  company_id  String
  mapping_type String  // 'sales_revenue', 'sales_tax', 'inventory', 'cogs', 'cash', 'accounts_receivable', etc.
  account_id  String
  is_default  Boolean  @default(true)
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @default(now()) @db.Timestamptz(6)
  
  companies   Company  @relation(fields: [company_id], references: [id], onDelete: Cascade)
  accounts    accounts @relation(fields: [account_id], references: [id], onDelete: Cascade)

  @@unique([company_id, mapping_type])
  @@index([company_id])
  @@index([mapping_type])
}

model journal_entries {
  id                                      String    @id @default(dbgenerated("gen_random_uuid()"))
  company_id                              String
  entry_number                            String    // NEW: JE-2024-001
  account_id                              String
  description                             String?
  entry_date                              DateTime? @default(now()) @db.Timestamptz(6)
  debit                                   Decimal?  @default(0) @db.Decimal(15, 2)
  credit                                  Decimal?  @default(0) @db.Decimal(15, 2)
  is_posted                               Boolean?  @default(false)
  is_automated                            Boolean?  @default(false)  // NEW: Auto-generated or manual
  reference_type                          String?   // NEW: 'sale', 'purchase', 'expense', 'payment'
  reference_id                            String?   // NEW: ID of the related transaction
  fiscal_period                           String?   // NEW: '2024-01', '2024-Q1'
  created_by                              String
  updated_by                              String?
  posted_by                               String?   // NEW
  posted_at                               DateTime? @db.Timestamptz(6)  // NEW
  created_at                              DateTime? @default(now()) @db.Timestamptz(6)
  updated_at                              DateTime? @default(now()) @db.Timestamptz(6)
  
  accounts                                accounts  @relation(fields: [account_id], references: [id], onDelete: Cascade)
  companies                               Company   @relation(fields: [company_id], references: [id], onDelete: Cascade)
  users_journal_entries_created_byTousers User      @relation("journal_entries_created_byTousers", fields: [created_by], references: [id])
  users_journal_entries_updated_byTousers User?     @relation("journal_entries_updated_byTousers", fields: [updated_by], references: [id])

  @@unique([company_id, entry_number])
  @@index([account_id])
  @@index([company_id])
  @@index([created_by])
  @@index([entry_date])
  @@index([reference_type, reference_id])  // NEW: Quick lookup for transaction journals
  @@index([is_posted])
  @@index([fiscal_period])
}

// NEW: Fiscal periods for closing books
model fiscal_periods {
  id          String    @id @default(dbgenerated("gen_random_uuid()"))
  company_id  String
  period_name String    // '2024-01', '2024-Q1', '2024'
  start_date  DateTime  @db.Date
  end_date    DateTime  @db.Date
  is_closed   Boolean   @default(false)
  closed_by   String?
  closed_at   DateTime? @db.Timestamptz(6)
  created_at  DateTime  @default(now()) @db.Timestamptz(6)
  
  companies   Company   @relation(fields: [company_id], references: [id], onDelete: Cascade)

  @@unique([company_id, period_name])
  @@index([company_id])
  @@index([start_date, end_date])
}


model points_of_sale {
  id                                           String    @id @default(dbgenerated("gen_random_uuid()"))
  company_id                                   String
  name                                         String    @db.VarChar(100)
  location                                     String?   @db.VarChar(255)
  manager_id                                   String
  is_active                                    Boolean?  @default(true)
  created_at                                   DateTime? @default(now()) @db.Timestamp(6)
  updated_at                                   DateTime? @default(now()) @db.Timestamp(6)
  accounts_points_of_sale_company_idToaccounts Company   @relation("points_of_sale_company_idToaccounts", fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  accounts_points_of_sale_manager_idToaccounts User      @relation("points_of_sale_manager_idToaccounts", fields: [manager_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sales                                        Sale[]
}
enum account_category {
  // Assets
  CASH_AND_BANK
  ACCOUNTS_RECEIVABLE
  INVENTORY
  OTHER_CURRENT_ASSETS
  FIXED_ASSETS
  ACCUMULATED_DEPRECIATION
  OTHER_ASSETS
  
  // Liabilities
  ACCOUNTS_PAYABLE
  CREDIT_CARD
  SHORT_TERM_LOANS
  SALES_TAX_PAYABLE
  ACCRUED_EXPENSES
  OTHER_CURRENT_LIABILITIES
  LONG_TERM_LIABILITIES
  
  // Equity
  OWNER_EQUITY
  RETAINED_EARNINGS
  DRAWINGS
  
  // Revenue
  SALES_REVENUE
  SERVICE_REVENUE
  OTHER_INCOME
  
  // Expenses
  COST_OF_GOODS_SOLD
  OPERATING_EXPENSES
  PAYROLL_EXPENSES
  ADMINISTRATIVE_EXPENSES
  OTHER_EXPENSES
}

enum account_type {
  ASSET
  LIABILITY
  EQUITY
  REVENUE
  EXPENSE
  COST_OF_GOODS
}